- name: eth_sendTransaction
  summary: Signs and submits a transaction.
  params:
    - name: Transaction
      required: true
      schema:
        $ref: '#/components/schemas/GenericTransaction'
  x-error-group:    
      - $ref: '#/components/x-error-group/JSONRPCNonStandardErrors'
      - $ref: '#/components/x-error-group/JSONRPCStandardErrors'
      - $ref: '#/components/x-error-group/GasErrors'
      - $ref: '#/components/x-error-group/ExecutionErrors'
      # Inline additional errors specific to this method
      - 
        - code: -31000
          message: "Already known transaction"
          data: "Transaction is already known to the transaction pool"
        - code: -31001
          message: "Invalid sender"
          data: "Transaction sender is invalid."
  result:
    name: Transaction hash
    schema:
      $ref: '#/components/schemas/hash32'
  examples:
    - name: eth_sendTransaction example
      params:
        - name: Transaction
          value:
            from: '0xb60e8dd61c5d32be8058bb8eb970870f07233155'
            to: '0xd46e8dd67c5d32be8058bb8eb970870f07244567'
            gas: '0x76c0'
            gasPrice: '0x9184e72a000'
            value: '0x9184e72a'
            input: '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675'
      result:
        name: Transaction hash
        value: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
- name: eth_sendRawTransaction
  summary: Submits a raw transaction. You can create and sign a transaction
    externally using a library such as [web3.js](https://web3js.readthedocs.io/)
    or [ethers.js](https://docs.ethers.org/). For
    [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw
    form must be the network form. This means it includes the blobs, KZG
    commitments, and KZG proofs.
    For [EIP-7594](https://eips.ethereum.org/EIPS/eip-7594) transactions, the raw format
    must be the network form. This means it includes the blobs, KZG commitments, and cell proofs.
    The logic for handling the new transaction during fork boundaries are
    1. When receiving an encoded transaction with cell proofs before the PeerDAS fork activates, we reject it. Only blob proofs are accepted into the pool.
    2. At the time of fork activation, the implementer could (not mandatory)
      - Drop all old-format transactions
      - Convert old proofs to new format (computationally expensive)
      - Convert only when including in a locally produced block
    3. After the fork has activated, only txs with cell proofs are accepted via p2p relay.
    4. On RPC (eth_sendRawTransaction), txs with blob proofs may still be accepted and will be auto-converted by the node. At implementer discretion, this facility can be deprecated later when users have switched to new client libraries that can create cell proofs.
  params:
    - name: Transaction
      required: true
      schema:
        $ref: '#/components/schemas/bytes'
  x-error-group:    
    - $ref: '#/components/x-error-group/JSONRPCNonStandardErrors'
    - $ref: '#/components/x-error-group/JSONRPCStandardErrors'
    - $ref: '#/components/x-error-group/GasErrors'
    - $ref: '#/components/x-error-group/ExecutionErrors'
    # Inline additional errors specific to this method
    - 
      - code: -31000
        message: "Already known transaction"
        data: "Transaction is already known to the transaction pool"
      - code: -31001
        message: "Invalid sender"
        data: "Transaction sender is invalid."
  result:
    name: Transaction hash
    schema:
      $ref: '#/components/schemas/hash32'
  examples:
    - name: eth_sendRawTransaction example
      params:
        - name: Transaction
          value: '0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833'
      result:
        name: Transaction hash
        value: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
