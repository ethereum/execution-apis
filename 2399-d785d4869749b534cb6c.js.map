{"version":3,"file":"2399-d785d4869749b534cb6c.js","mappings":"iIAKO,IAAIA,E,iFACX,SAAWA,GACPA,EAAMC,WAAa,IAAIC,IACvBF,EAAMG,UAAY,aAClBH,EAAMI,gBAAkB,mBAIxBJ,EAAMK,uBAHN,SAAgCC,GAC5B,OAAOA,EAAKN,EAAMI,kBAAoB,EAC1C,CAEH,CARD,CAQGJ,IAAUA,EAAQ,CAAC,IACf,MAAMO,EAAwBC,EAAgB,wBAa9C,SAASA,EAAgBC,GAC5B,GAAIT,EAAMC,WAAWS,IAAID,GACrB,OAAOT,EAAMC,WAAWU,IAAIF,GAEhC,MAAMG,EAAK,SAAUC,EAAQC,EAAKC,GAC9B,GAAyB,IAArBC,UAAUC,OACV,MAAM,IAAIC,MAAM,qEAlB5B,SAAgCN,EAAIC,EAAQE,GACpCF,EAAOb,EAAMG,aAAeU,EAC5BA,EAAOb,EAAMI,iBAAiBe,KAAK,CAAEP,KAAIG,WAGzCF,EAAOb,EAAMI,iBAAmB,CAAC,CAAEQ,KAAIG,UACvCF,EAAOb,EAAMG,WAAaU,EAElC,CAYQO,CAAuBR,EAAIC,EAAQE,EACvC,EAGA,OAFAH,EAAGS,SAAW,IAAMZ,EACpBT,EAAMC,WAAWqB,IAAIb,EAAWG,GACzBA,CACX,C","sources":["webpack://execution-apis/./node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n"],"names":["_util","serviceIds","Map","DI_TARGET","DI_DEPENDENCIES","getServiceDependencies","ctor","IInstantiationService","createDecorator","serviceId","has","get","id","target","key","index","arguments","length","Error","push","storeServiceDependency","toString","set"],"sourceRoot":""}