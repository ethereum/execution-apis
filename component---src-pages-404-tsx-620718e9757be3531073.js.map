{"version":3,"file":"component---src-pages-404-tsx-620718e9757be3531073.js","mappings":"8LAmBO,SAASA,EAAGC,GAAwE,IAADC,EAAAC,EAAA,IAAtE,YAAEC,EAAc,GAAE,KAAEC,EAAO,KAAI,KAAEC,EAAO,GAAE,MAAEC,EAAK,MAAEC,GAAiBP,EACtF,MAAM,KAAEQ,IAASC,EAAAA,EAAAA,gBAAe,aAa1BC,EAAkBP,GAAeK,EAAKG,aAAaR,YACnDS,EAAgC,QAApBX,EAAGO,EAAKG,oBAAY,IAAAV,OAAA,EAAjBA,EAAmBK,MAClCO,EACJN,GAASC,EAAKG,aAAaG,QAAU,GAAGN,EAAKG,aAAaG,UAAUP,IAAU,KAGhF,OACEQ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQT,EAAQ,GAAGA,OAAWM,IAAiBA,GAC/CG,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASP,IAClCK,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASX,GAASM,IAC5CG,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASP,IACzCK,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YAChCJ,GAAaE,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASJ,IACjDE,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,SAA0B,QAAjBf,EAAAM,EAAKG,oBAAY,IAAAT,OAAA,EAAjBA,EAAmBiB,SAAU,KACnEJ,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASX,GAASM,IAC7CG,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASP,IACzCG,GAAaE,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASJ,IACjDR,EAAKe,KAAI,CAAAC,EAAoBC,KAAC,IAApB,KAAEN,EAAI,QAAEC,GAASI,EAAA,OAC1BN,EAAAA,cAAA,QAAMQ,IAAKD,EAAGN,KAAMA,EAAMC,QAASA,GAAW,IAItD,CC7CA,MARqBO,IACnBT,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAChB,EAAG,CAACO,MAAM,mBACXS,EAAAA,cAAA,UAAI,aACJA,EAAAA,cAAA,SAAG,2D","sources":["webpack://execution-apis/./src/components/seo.tsx","webpack://execution-apis/./src/pages/404.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SEOProps {\n  description?: string;\n  lang?: string;\n  meta?: Array<{ name: string; content: string }>;\n  title?: string;\n  image?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function SEO({ description = '', lang = 'en', meta = [], title, image }: SEOProps) {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n  const metaImage =\n    image && site.siteMetadata.siteUrl ? `${site.siteMetadata.siteUrl}${image}` : null;\n\n  // Instead of returning a Helmet component, we directly return the elements\n  return (\n    <>\n      <title>{title ? `${title} | ${defaultTitle}` : defaultTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title || defaultTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {metaImage && <meta property=\"og:image\" content={metaImage} />}\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ''} />\n      <meta name=\"twitter:title\" content={title || defaultTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {metaImage && <meta name=\"twitter:image\" content={metaImage} />}\n      {meta.map(({ name, content }, i) => (\n        <meta key={i} name={name} content={content} />\n      ))}\n    </>\n  );\n}\n\n// This is the component that will be used by Gatsby's Head API\nexport const Head = SEO;\n","import React from 'react';\n\nimport { SEO } from '../components/seo';\n\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </>\n);\n\nexport default NotFoundPage;\n"],"names":["SEO","_ref","_site$siteMetadata","_site$siteMetadata2","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","metaImage","siteUrl","React","name","content","property","author","map","_ref2","i","key","NotFoundPage"],"sourceRoot":""}